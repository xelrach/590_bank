******** Quantification of timing and delay procedures ********


******** Primary/backup method description ********


******** Recovery protocol description ********
Recovery is done by state transfer. When a process wakes up from its fake crash, it asks one of the other processes for the current master server. The recovering process asks the master server for its state. The master server queues incoming messages while it gathers its state and sends it to the recovering process. The recovering process then sets all of its accounts to their current values and is then ready to receive messages as a normal backup. 

Crash Detection - Recap

Crashes are detected by means of a heartbeat signal that is sent out through UDP from the master process to each of the backups. Each 
backup process listens for the heartbeat and updates a flag upon receipt; meanwhile, a separate monitor thread in each backup process 
periodically checks this flag and clears it. If the monitor thread finds that the flag is false, a crash is assumed, and crash 
recovery mode begins.

Crash Recovery

Upon receiving a "crash" signal from the GUI, the master process sleeps for a predetermined "crash time," so that the process will not 
carry out any other actions, or respond to any messages, as though it has actually crashed. A former-master-crash-recovery routine 
will run after this crash period, to facilitate the transition from master to backup.

For the backup processes, the task at hand is to determine which is to become the new master process. For robustness, the system does 
not assume that if process 1 (the master) crashes, that process 2 (the next backup in line) is necessarily the automatic new master; 
process 2 may have crashed as well, or otherwise might not be able to communicate, necessitating the promotion of process 3 to become 
the new master.

Consequently, when the a master-crash is detected, each backup process broadcasts its own heartbeat message to all other backups for 
the given branch. Each process maintains a list of the other master/backup processes for the branch that they represent; upon a crash, 
each process updates its list to indicate that it does not know the status of any other process. The processes then wait a 
predetermined amount of time to receive the heartbeats from the other backups. Each process updates its list of other backups as the 
heartbeats are received, so that after the waiting period is over, each process will have a recent snapshot of which processes are 
alive and which are not. The master process should be listed as dead, since it has crashed (for the simulated crash, it should be 
sleeping for the entire time that the backup processes are handling the recovery.) Once the waiting period is over, each process 
merely looks through its list of other backups, and whichever process is alive and has the lowest processID is assumed to be the new 
master. The process that determines that it is, itself, the new master, sends an update to the GUI to inform it of the new master 
port, and begins sending a heartbeat to all of the other processes in the backup-cluster.

Once the former master process has recovered (i.e. the sleep representing the crash has completed), the master process requests an 
update from any of the other processes to catch up to the latest state of the data in the system.

******** Failure Detection Description:  Heartbeat ********

We use a heartbeat method to detect failure:
	- Every second, each node that thinks it's the master node in its cluster sends out a heartbeat message to all the other nodes its knows are in the cluster
	- Every second, all nodes that think they are *not* masters in their clusters:
		- Set a flag master_is_alive = false
		- Heartbeat check:  If a heartbeat is received by the end of that second, master_is_alive becomes true
		- If master_is_alive == false at the second of the second, after the heartbeat check, node infers failure of the master
			- At this point, node initiates recovery process
				- Starts by initiating selection of new master